@using MenShopBlazor.DTOs.Collection
@using MenShopBlazor.Services.Collection
@inject ICollectionService CollectionService
@inject ISnackbar Snackbar
<MudDialog>
    <DialogContent>
        <MudText>
            Tạo bộ sưu tập
        </MudText>
        <MudTextField @bind-Value="collectionDTO.CollectionName"
                      Label="Tên Bộ Sưu Tập"
                      Required="true"
                      Immediate="true"
                      For="@(() => collectionDTO.CollectionName)"
                      Margin="Margin.Dense"
                      Variant="Variant.Outlined" />
        <MudTextField @bind-Value="collectionDTO.Description"
                      Label="Mô Tả"
                      Required="true"
                      Immediate="true"
                      For="@(() => collectionDTO.Description)"
                      Margin="Margin.Dense"
                      Variant="Variant.Outlined" />
        <MudDatePicker @bind-Date="collectionDTO.StartTime"
                       Label="Ngày bắt đầu"
                       DateFormat="dd-MM-yyyy"
                       Required="true"
                       Margin="Margin.Dense"
                       Variant="Variant.Outlined" />

        <MudDatePicker @bind-Date="collectionDTO.EndTime"
                       Label="Ngày kết thúc"
                       DateFormat="dd-MM-yyyy"
                       Required="true"
                       Margin="Margin.Dense"
                       Variant="Variant.Outlined" />
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Primary" OnClick="CreateProductAsync">Thêm</MudButton>
        <MudButton OnClick="Cancel">Hủy</MudButton>
    </DialogActions>
</MudDialog>
@code {
    [CascadingParameter] private IMudDialogInstance MudDialog { get; set; }
    private List<CollectionDTO> collectionDTOs = new(); // đảm bảo không null
    private CreateCollectionDTO collectionDTO = new();
    protected override async Task OnInitializedAsync()
    {
        collectionDTO.Status = true;
    }
    private async Task loadpage()
    {
        try
        {
            var result = await CollectionService.GetAllCollection();
            if (result == null || !result.Any())
            {
                Console.WriteLine("Không nhận được dữ liệu hoặc danh sách rỗng.");
            }
            else
            {
                Console.WriteLine($"Số lượng Collection: {result.Count}");
            }

            collectionDTOs = result ?? new();
        }
        catch (Exception ex)
        {
            Console.WriteLine("Lỗi khi tải dữ liệu: " + ex.Message);
            collectionDTOs = new(); 
        }


    }
    private async Task CreateProductAsync()
    {
        if (string.IsNullOrWhiteSpace(collectionDTO.CollectionName))
        {
            Snackbar.Add("Tên bộ sưu tập không được để trống", Severity.Warning);
            return;
        }
        if (string.IsNullOrWhiteSpace(collectionDTO.Description))
        {
            Snackbar.Add("Mô tả không được để trống", Severity.Warning);
            return;
        }

        var response = await CollectionService.AddCollection(collectionDTO);
        if (response.IsSuccess)
        {
            Snackbar.Add($"{response.Message}", Severity.Success);
            MudDialog.Close(DialogResult.Ok(true));
            loadpage();
        }
        else
        {
            Snackbar.Add($"{response.Message}", Severity.Error);
        }
    }
    private void Cancel()
    {
        MudDialog.Cancel();
        loadpage();
    }
}
