@using MenShopBlazor.DTOs.Collection
@using MenShopBlazor.DTOs.DiscountPrice
@using MenShopBlazor.Services.Collection
@using MenShopBlazor.Services.DiscountPrice
@inject ISnackbar Snackbar
@inject IDiscountPriceService DiscountPriceService
<MudDialog>
    <TitleContent>
        Cập nhật Colelction
    </TitleContent>
    <DialogContent>
        <MudTextField @bind-Value="collectionDTO.Name"
                      Label="Tên Chương Trình"
                      Required="true"
                      Immediate="true"
                      For="@(() => collectionDTO.Name)"
                      Margin="Margin.Dense"
                      Variant="Variant.Outlined" />
        <MudTextField @bind-Value="collectionDTO.DiscountPercent"
                      Label="Tỷ Lệ Giá Giảm"
                      Required="true"
                      Immediate="true"
                      For="@(() => collectionDTO.DiscountPercent)"
                      Margin="Margin.Dense"
                      Variant="Variant.Outlined" />
        <MudDatePicker @bind-Date="collectionDTO.StartTime"
                       Label="Ngày bắt đầu"
                       DateFormat="dd-MM-yyyy"
                       Required="true"
                       Margin="Margin.Dense"
                       Variant="Variant.Outlined" />

        <MudDatePicker @bind-Date="collectionDTO.EndTime"
                       Label="Ngày kết thúc"
                       DateFormat="dd-MM-yyyy"
                       Required="true"
                       Margin="Margin.Dense"
                       Variant="Variant.Outlined" />
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Primary" OnClick="Update">Cập Nhật</MudButton>
        <MudButton OnClick="Cancel">Hủy</MudButton>
    </DialogActions>
</MudDialog>
@code {
    [CascadingParameter] private IMudDialogInstance MudDialog { get; set; }
    [Parameter] public DiscountPriceViewModel collectionDTO { get; set; } = new();
    private List<DiscountPriceViewModel> collectionDTOs = new();

    protected override async Task OnInitializedAsync()
    {
        collectionDTO = await DiscountPriceService.GetDiscountPriceById(collectionDTO.Id);
    }
    private async Task loadpage()
    {
        try
        {
            var result = await DiscountPriceService.GetAllDiscountPrice();
            if (result == null || !result.Any())
            {
                Console.WriteLine("Không nhận được dữ liệu hoặc danh sách rỗng.");
            }
            else
            {
                Console.WriteLine($"Số lượng giảm giá: {result.Count}");
            }

            collectionDTOs = result ?? new();
        }
        catch (Exception ex)
        {
            Console.WriteLine("Lỗi khi tải dữ liệu: " + ex.Message);
            collectionDTOs = new();
        }


    }
    private async Task Update()
    {
        if (string.IsNullOrWhiteSpace(collectionDTO.Name))
        {
            Snackbar.Add("Tên chương trình không được để trống", Severity.Warning);
            return;
        }
        if (collectionDTO.DiscountPercent == null)
        {
            Snackbar.Add("Tỷ lệ giá giảm không được để trống", Severity.Warning);
            return;
        }
        if (collectionDTO.EndTime < collectionDTO.StartTime)
        {
            Snackbar.Add("Ngày kết thúc không được trước ngày bắt đầu", Severity.Error);
            return;
        }

        var dto = new CreateDiscountPriceDTO
        {
            Name = collectionDTO.Name,
            DiscountPercent = collectionDTO.DiscountPercent,
            StartTime = collectionDTO.StartTime,
            EndTime = collectionDTO.EndTime
        };

        var response = await DiscountPriceService.UpdateDiscountPrice(collectionDTO.Id, dto);
        if (response != null)
        {
            Snackbar.Add("Cập nhật khuyến mãi thành công", Severity.Success);
            MudDialog.Close(DialogResult.Ok(true));
            await loadpage();
        }
        else
        {
            Snackbar.Add("Cập nhật khuyễn mãi thất bại: " + response?.Message, Severity.Error);
        }

    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }
}
